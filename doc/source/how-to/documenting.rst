Documenting PyAnsys Libraries
=============================
PyAnsys documentation must not only be written but also maintained. If you are
new to writing developer documentation, see the `Google Developer Documentation
Style Guide <https://developers.google.com/style>`_. It provides
editorial guidelines for writing clear and consistent developer documentation,
allowing this guide to supply guidance specific to PyAnsys library
documentation.

When writing developer documentation, the relationship between code and
documentation is key. To keep documentation up to date with radial evolving
code:

- Minimize the content footprint
- Write `timeless documentation <https://developers.google.com/style/timeless-documentation>`_
- Support contributions from both inside and outside of the development team
- Perform periodic reviews

Documentation Sources
---------------------
The generation of PyAnsys documentation uses `Sphinx
<https://www.sphinx-doc.org/en/master/>`__ and an Ansys-branded theme
(`pyansys-sphinx-theme <https://github.com/pyansys/pyansys-sphinx-theme>`_) to
assemble content in:

- Docstrings
- reStructuredText (RST) files
- Python (PY) example files

Docstrings
~~~~~~~~~~
Docstrings must be formatted so that Sphinx can parse them. You can use either
of these Sphinx extensions:
 
- `numpydoc <https://pypi.org/project/numpydoc/>`_
- `napoleon <https://pypi.org/project/sphinxcontrib-napoleon/>`_

The ``numpydoc`` extension is generally preferred because it supports an API
documentation structure with one page per method, providing Python community
members with documentation like that generated by `pandas <https://pandas.pydata.org/>`_
and `NumPy <https://numpy.org/>`_. If, however, your API is very linear, you
might prefer the  ``napoleon`` extension because it supports a documentation
structure where everything needed to solve a certain problem can be shown on one page.

The ``numpydoc`` extension provides its own `style guide
<https://numpydoc.readthedocs.io/en/latest/format.html>`_ and a `user guide
<https://numpydoc.readthedocs.io/en/latest/>`_ that explains how to use the
extension with Sphinx. The ``napoleon`` extension, which parses both numpy and
Google style docstrings, refers you to the `Google Python Style Guide
<https://google.github.io/styleguide/pyguide.html>`_.

Regardless of the extension that you choose for generating documentation, we
recommend the use of numpy-style docstrings so that there is consistency
within PyAnsys libraries. For more information, see :ref:`Documentation Style`.

RST Files
~~~~~~~~~
To provide general usage information in your documentation, use your favorite
editor to create RST files that you then place in :ref:`The \`\`doc/\`\`
Directory` directory. The ``index.rst`` file in the ``doc/source`` directory
defines the first level of your documentation hierarchy.  The ``toctree``
directive (which stands for "table of contents tree") indicates the maximum
number of heading levels that the documentation is to display. Below this
directive are the directory names for your documentation sections.  Each
documentation chapter has its own ``index.rst`` file, as shown by figure
:numref:`proposed_doc_layout`.

.. include:: diag/doc_layout.rst

Documentation structure shown in :numref:`proposed_doc_layout` can be modelled
using the following code in each one of the ``index.rst`` files.

.. tabs::

    .. tab:: index.rst

        .. code-block:: rst

            Welcome to the Library Documentation
            ####################################

            This is the content of the root `index.rst` file.

            .. toctree::

                chapter_A/index
                chapter_B/index

    .. tab:: chapter_A/index.rst

        .. code-block:: rst

            Chapter A
            #########

            This is the content of the `chapter_A/index.rst` file.

            .. toctree::

                section_1
                section_2
                ...

    .. tab:: chapter_B/index.rst

        .. code-block:: rst

            Chapter B
            #########

            This is the content of the `chapter_B/index.rst` file.

            .. toctree::

                another_section
                ...

While you do not include the ``.rst`` extension when defining the section
structure, the index file referenced for each chapter must be named
``index.rst``.

After you build documentation locally as described in :ref:`Building
Documentation`, the first-level heading in the ``index.rst`` file for each
documentation chapter is shown as clickable link in the header of the
documentation's generated HTML output. For more information on defining a
documentation structure, see the `Sphinx Getting Started
<https://www.sphinx-doc.org/en/master/usage/quickstart.html>`_ guide.

Indicating RST Titles
+++++++++++++++++++++
Within RST files, heading titles are followed by a line having a string of
characters that is the same length as the heading title. If the length of the
characters under the heading title do not match the length of the heading
title, Sphinx generates a warning.

For consistency within PyAnsys libraries, the use of these special characters
is recommended for headings but are not enforced:

- For chapter-level headings, use ``###``.
- For section-level headings, use ``===``.
- For subsection-level headings, use ``---``.
- For subsubsection-level headings, use ``~~~``. 
- For paragraph-level headings, use ``+++``. 

For comprehensive syntax information, see the `reStrucutredText Markup Specification
<https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html>`_.

Because you need to be familiar with the content in the `PyAnsys Developer's
Guide <dev.docs.pyansys.com/>`_, page through its HTML pages and then explore
the RST files in its repository. This will help you to understand the syntax and
see how RST files have been nested to create this guide.

Recommended Chapters
++++++++++++++++++++
Although each project is different, documentation has the same goal: providing
instructions and guidelines for the users. Thus, some common chapters can be
found across software projects. Try to include these chapters in your project:

- ``Getting Started`` contains guidelines on how to install and setup the software.
- ``User Guide`` quickly demonstrates some of the basic features of the library.
- ``API Reference`` documents the different objects of the library.
- ``Examples`` fully fledged tutorials and case of use of the product.


Examples
~~~~~~~~
Examples come in two formats:

- Basic code snippets demonstrating some functionality
- Full-fledged standalone examples that are meant to be run as individual downloadable scripts

Basic code snippets should be placed in the ``doc/source`` directory.
Full-fledged standalone examples must be placed in the ``examples/`` directory
at the root of the repository. All of these examples, which should be :ref:`PEP
8` compliant, are compiled dynamically during the build process. Always ensure
that your examples run properly locally because they will be verified through
the CI performed via GitHub Actions.

Adding a new standalone example consists of placing it in an applicable
subdirectory in the ``examples/`` directory. If none of the existing directories
match the category of your example, create a new subdirectory with a
``README.txt`` file describing the new category. Because these examples are
built using the `Sphinx-Gallery
<https://sphinx-gallery.github.io/stable/index.html>`_ extension, you must
follow its `coding guidelines
<https://sphinx-gallery.github.io/stable/index.html>`_.

PyMAPDL provides a self-demonstrating example of how to `add an example
reference key
<https://mapdldocs.pyansys.com/examples/03-tips-n-tricks/00-example-template.html#ref-how-to-add-an-example-reference-key>`_. 


Documenting Python Code
-----------------------
Documenting Python Code can be done by using `sphinx.ext.autodoc`. This
extension allows you to include the following directives in your :ref:`RST
Files`:

* ``automodule`` for documenting modules.
* ``autoclass`` for documenting classes.
* ``autofunction`` for documenting functions.

For a full list of auto-directives, visit `Include Documentation From Docstrings
<https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`_.


Documenting Classes
~~~~~~~~~~~~~~~~~~~
There are two main ways of using Sphinx to document a class:

* Manually describe 'how' and 'why' to use a class in either a ``User Guide`` or
  an example within the library's documentation

* Automatically generate documentation for classes using the ``autoclass`` or
  ``autosummary`` directive

Manual Documentation
++++++++++++++++++++
To manually describe 'how' and 'why' to exercise a class, use the ``code-block``
directive:

.. tabs::

    .. tab:: Doc Source Code

        .. code-block:: rst
        
            Initialize ``my_module.MyClass`` with initial parameters. These
            parameters are automatically assigned to the class.
        
            .. code-block:: pycon
        
               >>> from my_module import MyClass
               >>> my_obj = MyClass(parm1='apple', parm2='orange')
               >>> my_obj.parm1
               'apple'

    .. tab:: Rendered Doc

        Initialize ``my_module.MyClass`` with initial parameters.  These
        parameters are automatically assigned to the class.
        
        .. code-block:: pycon
        
           >>> from my_module import MyClass
           >>> my_obj = MyClass(parm1='apple', parm2='orange')
           >>> my_obj.parm1
           'apple'

Auto-generated Documentation
++++++++++++++++++++++++++++
To automatically generate class descriptions, use either the ``autoclass``
or ``autosummary`` directive.

For simple classes, use the ``autoclass`` directive.


.. tabs::

    .. tab:: Doc Source Code

        .. code-block:: rst

            .. autoclass:: pyansys_sphinx_theme.samples.ExampleClass
               :members:

    .. tab:: Rendered Doc

        .. autoclass:: pyansys_sphinx_theme.samples.ExampleClass
            :members:


For complex classes with many methods, use the
``autosummary`` directive:

.. tabs:: 

    .. tab:: Doc Source Code

        .. code-block:: rst

            .. autoclass:: pyansys_sphinx_theme.samples.Complex

            .. autosummary::
               :toctree: api/

               pyansys_sphinx_theme.samples.Complex.real
               pyansys_sphinx_theme.samples.Complex.imag
               pyansys_sphinx_theme.samples.Complex.abs

    .. tab:: Rendered Doc

        .. autoclass:: pyansys_sphinx_theme.samples.Complex
        
        .. autosummary::

           pyansys_sphinx_theme.samples.Complex.real
           pyansys_sphinx_theme.samples.Complex.imag
           pyansys_sphinx_theme.samples.Complex.abs


Documenting Multiple Classes
++++++++++++++++++++++++++++
To document a set of small but highly cohesive classes, an option is to combine
the two approaches described above. This is done by including multiple
``autoclass`` directives on the same page with headings and text blocks as
necessary to describe the relationships between the classes.

For example, the Granta MI BoM Analytics
:external+grantami-bomanalytics:doc:`Part Compliance page <api/compliance/parts>`
first describes the
:external+grantami-bomanalytics:class:`~ansys.grantami.bomanalytics.queries.PartComplianceQuery`
class, and then it describes the
:external+grantami-bomanalytics:class:`~ansys.grantami.bomanalytics._query_results.PartComplianceQueryResult`,
and
:external+grantami-bomanalytics:class:`~ansys.grantami.bomanalytics._item_results.PartWithComplianceResult`
classes returned by the query. The classes are only ever
encountered together in this context, so they are documented on a
single page.

In contrast, the
:external+grantami-bomanalytics:class:`~ansys.grantami.bomanalytics.indicators.RoHSIndicator`
and
:external+grantami-bomanalytics:class:`~ansys.grantami.bomanalytics.indicators.WatchListIndicator`
classes are shared across multiple queries, and so they are
documented separately.


Building Documentation
----------------------
Documentation is built using `Sphinx <https://www.sphinx-doc.org/en/master/>`_.
The whole building process can be configured using the ``conf.py`` file, located
in the ``source/`` directory inside :ref:`The \`\`doc/\`\` Directory`.

This directory also contains a ``Makefile`` and a ``make.bat`` files for
automating the building process. Different builders resulting in different
rendered documentation types are available such as ``HTML``, ``LaTeX`` or
``PDF``. The builder name needs to be specified together at building time.

.. tabs::

    .. tab:: Makefile

        .. code-block:: bash

            make <builder>

    .. tab:: make.bat

        .. code-block:: bash

            make.bat <builder>

where in previous tabs, ``<builder>`` can be ``html``, ``latex`` or ``pdf``.


Deploying Documentation
-----------------------
To host the HTML documentation related to a PyAnsys project, an easy way to go
is to use GitHub Pages. This GitHub feature do not require any database to be
setup nor to configure any server.

The following workflow provides the general steps to be executed for building
and deploying a PyAnsys project documentation when :ref:`Using Continuous
Integration`.

.. literalinclude:: code/docs.yml
   :language: yaml

GitHub will serve the documentation related to the project from a URL tied to
PyAnsys organization.

The standard name for this URL can be such as:

.. code-block:: text

    https://www.<product_name>.docs.pyansys.com

For instance: `https://www.grantami.docs.pyansys.com <https://grantami.docs.pyansys.com>`_

Regarding the documentation dedicated to a specific feature of the product or an
example, the URL is formatted like this:

.. code-block:: text

    https://www.<extra>.<product_name>.docs.pyansys.com

Once the URL name has been decided, it must be specified in the ``Settings ->
Pages -> Custom domain``, in the :ref:`GitHub Repository Sections`.

Then, the URL has to be registered using Microsoft Azure to set the DNS properly
and link it to the ANSYS organization. This action will be performed by one of
the Ansys administrator of Microsoft Azure account.

Accessing Online Documentation
------------------------------
Documentation for the latest stable release of a PyAnsys library is accessible
from its repository. You can generally access the latest development version of the
documentation tracking the ``main`` branch by adding the prefix ``dev.`` to
the URL for the latest stable release.

For example, consider PyAEDT documentation:

- The URL for documentation of the latest stable release is `<https://aedtdocs.pyansys.com/>`_.
- The URL for documentation of the latest development version is `<https://dev.aedtdocs.pyansys.com/>`_.

The latest development versions of both the library and its documentation are
automatically kept up-to-date via GitHub actions.

To make documentation changes, you create a branch with a name that begins with
a prefix of ``doc/`` that is then followed by a short description of what you
are changing. For more information, see :ref:`Branching Model`.

As you are making changes in this branch, you want to periodically generate the
documentation locally so that you can test your changes before you create a
GitHub pull request. For more information, see :ref:`Building Documentation`.


..
   Links

.. _GitHub Pages: https://pages.github.com/
.. _GitHub Actions: https://github.com/features/actions
.. _PyMAPDL Documentation: https://mapdldocs.pyansys.com/
.. _pyansys/pymapdl-docs: https://github.com/pyansys/pymapdl-docs
.. _gh-pages: https://github.com/pyansys/dev-guide/tree/gh-pages
.. _enabling GitHub pages: https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-your-site
.. _tox: https://github.com/tox-dev/tox
.. _PyAnsys DNS Zones: https://portal.azure.com/#@ansys.com/resource/subscriptions/2870ae10-53f8-46b1-8971-93761377c38b/resourceGroups/pyansys/providers/Microsoft.Network/dnszones/pyansys.com/overview
.. _Maxime Rey: https://teams.microsoft.com/l/chat/0/0?users=maxime.rey@ansys.com
.. _Roberto Pastor Muela: https://teams.microsoft.com/l/chat/0/0?users=roberto.pastormuela@ansys.com
.. _Alex Kaszynski: https://teams.microsoft.com/l/chat/0/0?users=alexander.kaszynski@ansys.com
.. _PyAnsys Bot: https://github.com/apps/pyansys-bot
.. _PyAnsys Organization: https://github.com/pyansys
.. _ansys-templates: https://github.com/pyansys/ansys-templates
